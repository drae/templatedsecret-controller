name: Publish Helm Chart

on:
  push:
    branches:
      - main
    paths:
      - "charts/templated-secret-controller/**"
      - ".github/workflows/helm-publish.yml"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Chart version to publish (leave empty to use version from Chart.yaml)"
        required: false
        type: string

jobs:
  publish:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    # Set environment variables at the job level so they're available to all steps
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "latest"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set chart version
        id: set-version
        run: |
          CHART_PATH="./charts/templated-secret-controller"
          DEFAULT_VERSION=$(awk '/^version:/ {print $2}' "$CHART_PATH/Chart.yaml" | tr -d '"')

          if [[ "${{ github.event_name }}" == "release" ]]; then
            # Use the GitHub release tag (without 'v' prefix if present)
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            # Use manually specified version
            VERSION="${{ github.event.inputs.version }}"
          else
            # Use version from Chart.yaml 
            VERSION="$DEFAULT_VERSION"
          fi

          echo "Using chart version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Update Chart.yaml with the version
          if [[ "$VERSION" != "$DEFAULT_VERSION" ]]; then
            sed -i "s/^version: .*$/version: $VERSION/" "$CHART_PATH/Chart.yaml"
          fi

      - name: Package and push chart
        run: |
          CHART_PATH="./charts/templated-secret-controller"
          CHART_NAME="templated-secret-controller"
          VERSION="${{ steps.set-version.outputs.version }}"

          # Package the Helm chart
          helm package "$CHART_PATH"

          # Push to GitHub OCI registry
          helm push "${CHART_NAME}-${VERSION}.tgz" oci://ghcr.io/${{ github.repository }}/charts

      - name: Output installation instructions
        run: |
          VERSION="${{ steps.set-version.outputs.version }}"
          echo "::notice::Chart published successfully! To install, run:"
          echo "::notice::helm install templated-secret-controller oci://ghcr.io/${{ github.repository }}/charts/templated-secret-controller --version $VERSION"
